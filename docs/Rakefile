require 'nuts/docs'

PROJECT_ROOT = ENV["PROJECT_ROOT"]
BUILD_ROOT   = ENV["BUILD_ROOT"]

raise "missing PROJECT_ROOT" if PROJECT_ROOT.nil?
raise "missing BUILD_ROOT" if BUILD_ROOT.nil?
raise "no such directory: #{PROJECT_ROOT}" unless File.directory?(PROJECT_ROOT)
raise "no such directory: #{BUILD_ROOT}" unless File.directory?(BUILD_ROOT)

ERB2MD_FILES = %w(index.md)

DOXYGEN_FILES = %w(api.md)

GITHUB_FILES = {
  "#{PROJECT_ROOT}/README.md" => "index.md.erb"
}

def erb_context(github)
  examples_dir = File.join(PROJECT_ROOT, "examples")
  context = Nuts::Docs::GeneralContext.new(github: github)

  Dir[File.join(examples_dir, "*.c")].inject(context) do |a, e|
    key = "#{File.basename(e, ".c")}_c"
    a[key] = e
    a
  end
end

def erb2md(source, target, github)
  runner = Nuts::Docs::Runner.new
  runner.context = erb_context(github)

  input = IO.read(source)
  output = runner.run(input)
  IO.write(target, output)

  puts "#{github && '(gh) ' || '     '} #{source} => #{target}"
end

DOXYGEN_FILES.each do |target|
  file target => "#{target}.erb" do |t|
    xml_path = File.join(BUILD_ROOT, "docs/xml")

    runner = Nuts::Docs::Runner.new
    runner.context = Nuts::Docs::DoxygenContext.new(xml_path, "nuts-getopts.h")

    input = IO.read(t.source)
    output = runner.run(input)
    IO.write(t.name, output)

    puts "(xml) #{t.source} => #{t.name}"
  end
end

ERB2MD_FILES.each do |target|
  file target => "#{target}.erb" do |t|
    erb2md(t.source, t.name, false)
  end
end

GITHUB_FILES.each do |(target, source)|
  file target => source do |t|
    erb2md(t.source, t.name, true)
  end
end

task default: ERB2MD_FILES + GITHUB_FILES.keys + DOXYGEN_FILES
